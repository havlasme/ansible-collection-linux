---
# chrony package state ('present', 'latest', 'absent')
# * 'present' ensures that the package is installed
# * 'latest' ensures that the latest version of the package is installed
# * 'absent' ensures that the package is not installed
chrony__state: 'present'
# should the chrony service start at boot? (using systemd)
chrony__enabled: '{{ chrony__state != "absent" }}'
# can ansible restart the chrony service? (using systemd)
chrony__ansible_restart: true

# chrony ntp pool list
# this variable is referenced by the default `etc/chrony/chrony.conf.j2` template
chrony__pool: |-
  pool 0.pool.ntp.org iburst maxsources 4
  pool 1.pool.ntp.org iburst maxsources 2
  pool 2.pool.ntp.org iburst maxsources 4
  pool 3.pool.ntp.org iburst maxsources 2
# should the chrony synchronize the hardware clock?
# this variable is referenced by the default `etc/chrony/chrony.conf.j2` template
chrony__rtcsync: true

# chrony conf list
chrony__conf:
## - dest: string
##   tmpl: string | d(chrony__conf_template)
##   backup: boolean | d(false)
##   user: string | d('root')
##   group: string | d('root')
##   mode: string | d('0755')
##   state: enum('present', 'absent', 'directory') | d('present')
- dest: '/etc/chrony'
  state: 'directory'
- dest: '/etc/chrony/chrony.conf'
  tmpl: 'etc/chrony/chrony.conf.j2'
# chrony conf default template
chrony__conf_template: '_content_.j2'

# chrony service environment template
# this template will be deployed at `/etc/default/chrony` which is referenced by the systemd service
#chrony__environment: string | d(omit)
...
