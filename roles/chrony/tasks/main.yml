---
- name: 'Assert that the Chrony State Value is Valid'
  ansible.builtin.assert:
    that:
    - chrony__state in [ 'present', 'latest', 'absent' ]
    msg: 'The `chrony__state` must be one of [ "present", "latest", "absent" ] - "{{ chrony__state }}" is not supported'
    quiet: true
  tags: [ 'always' ]

#
# Install
#

- name: 'Install | {{ (chrony__state == "absent") | ternary("Uninstall", "Install or Update") }} the Chrony via APT'
  ansible.builtin.apt:
    name: '{{ chrony__package_name }}'
    update_cache: '{{ chrony__state != "absent" }}'
    cache_valid_time: 1800
    state: '{{ chrony__state }}'
  notify:
  - 'Chrony | Restart Service'
  tags: [ 'role:chrony', 'role:chrony:install', 'task:install' ]

#
# Configure
#

- name: 'Configure | Delete a Chrony Conf File'
  ansible.builtin.file:
    dest: '{{ item.dest | mandatory }}'
    state: 'absent'
  loop: '{{ chrony__conf | selectattr("state", "havlasme.ansible.is_absent") | list }}'
  loop_control:
    label: '{{ item.dest | mandatory }}'
  notify:
  - 'Chrony | Restart Service'
  when:
  - chrony__state != 'absent'
  tags: [ 'role:chrony', 'role:chrony:configure', 'task:configure' ]

- name: 'Configure | Create the Chrony Conf Directory Structure'
  ansible.builtin.file:
    dest: '{{ item.dest | mandatory }}'
    owner: '{{ item.user | d("root") }}'
    group: '{{ item.group | d("root") }}'
    mode: '{{ item.mode | d("0755") }}'
    state: 'directory'
  loop: '{{ chrony__conf | selectattr("state", "havlasme.ansible.is_directory") | list }}'
  loop_control:
    label: '{{ item.dest | mandatory }}'
  notify:
  - 'Chrony | Restart Service'
  when:
  - chrony__state != 'absent'
  tags: [ 'role:chrony', 'role:chrony:configure', 'task:configure' ]

- name: 'Configure | Create or Update a Chrony Conf File'
  ansible.builtin.template:
    dest: '{{ item.dest | mandatory }}'
    src: '{{ lookup("havlasme.ansible.template", item.tmpl | d(chrony__conf_template)) }}'
    owner: '{{ item.user | d("root") }}'
    group: '{{ item.group | d("root") }}'
    mode: '{{ item.mode | d("0644") }}'
    backup: '{{ item.backup | d(false) }}'
  loop: '{{ chrony__conf | selectattr("state", "havlasme.ansible.is_present") | list }}'
  loop_control:
    label: '{{ item.dest | mandatory }}'
  notify:
  - 'Chrony | Restart Service'
  when:
  - chrony__state != 'absent'
  tags: [ 'role:chrony', 'role:chrony:configure', 'task:configure' ]

- name: 'Configure | Create or Update the Chrony Service Environment File'
  ansible.builtin.template:
    dest: '/etc/default/chrony'
    src: '{{ chrony__environment | mandatory }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify:
  - 'Chrony | Restart Service'
  when:
  - chrony__environment is defined
  - chrony__state != 'absent'
  tags: [ 'role:chrony', 'role:chrony:configure', 'task:configure' ]

#
# Service
#

- name: 'Service | {{ (chrony__state == "absent") | ternary("Stop and Disable", "Start and Enable") }} the Chrony Service'
  ansible.builtin.systemd:
    name: '{{ chrony__service_name }}'
    daemon_reload: true
    enabled: '{{ (chrony__state == "absent") | ternary(false, chrony__enabled) }}'
    state: '{{ (chrony__state == "absent") | ternary("stopped", "started") }}'
  tags: [ 'role:chrony', 'role:chrony:service', 'task:service' ]
...
